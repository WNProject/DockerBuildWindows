name: Update license
on:
  push:
    branches: main
    paths: .github/workflows/update-license.yml
  schedule:
    - cron: '0 0 1 1 *'
env:
  BRANCH: auto/update-license
  REGEX: '^(Copyright.*)[0-9]{4}(, WNProject Authors)$'
jobs:
  update-license:
    name: Update license
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Determine year
        id: year
        run: echo "::set-output name=value::$(date +%Y)"
      - name: Switch to '${{env.BRANCH}}'
        run: |
          git fetch origin +refs/heads/$BRANCH:refs/heads/$BRANCH || true  
          git checkout $BRANCH || git checkout -b $BRANCH
      - name: Update license
        run: |
          sed -i -E "s/$REGEX/\1${{steps.year.outputs.value}}\2/" LICENSE
      - name: Check for changes
        id: changes
        run: |
          git diff --exit-code LICENSE || echo "::set-output name=exist::true"
      - name: Create commit
        if: steps.changes.outputs.exist
        run: |
          git reset --hard origin/main
          sed -i -E "s/$REGEX/\1${{steps.year.outputs.value}}\2/" LICENSE
          git config user.name $COMMIT_USERNAME
          git config user.email $COMMIT_EMAIL
          git add LICENSE
          git commit -m "Update license year to ${{steps.year.outputs.value}}"
          git push --force origin $BRANCH
        env:
          COMMIT_USERNAME: ${{secrets.UPDATE_LICENSE_USER}}
          COMMIT_EMAIL: ${{secrets.UPDATE_LICENSE_EMAIL}}
      - name: Create pull request
        if: steps.changes.outputs.exist
        uses: actions/github-script@v5
        with:
          script: |
            const [owner, repo] = '${{github.repository}}'.split('/');
            const base = 'refs/heads/main';
            const head = 'refs/heads/${{env.BRANCH}}';
            const pullRequests = await github.rest.pulls.list({
              head: `${owner}:${head}`,
              owner, repo, base
            });
            if (pullRequests.data.length === 0) {
              const createResult = await github.rest.pulls.create({
                title: 'Update license year to ${{steps.year.outputs.value}}',
                owner, repo, head, base
              });
              github.rest.issues.addLabels({
                issue_number: createResult.data.number,
                owner, repo, labels: ['auto']
              });
              console.log('Created new pull request');
              return createResult.data.number;
            } else {
              const prNumber = pullRequests.data.first().number;
              github.rest.issues.update({
                issue_number: prNumber,
                title: 'Update license year to ${{steps.year.outputs.value}}',
                owner, repo
              });         
              console.log(`Pull request already exists, updated #${prNumber}`);
              return prNumber;
            }
          result-encoding: string
          github-token: ${{secrets.UPDATE_LICENSE_TOKEN}}
